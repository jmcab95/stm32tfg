/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.2-dev */

#ifndef PB_TRANSMISSIONMESSAGES_PB_H_INCLUDED
#define PB_TRANSMISSIONMESSAGES_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Enum definitions */
typedef enum _IOControl_TypeOfControl {
    IOControl_TypeOfControl_ANALOGWRITE = 1,
    IOControl_TypeOfControl_DIGITALWRITE = 2,
    IOControl_TypeOfControl_ANALOGREAD = 3,
    IOControl_TypeOfControl_DIGITALREAD = 4
} IOControl_TypeOfControl;

typedef enum _IOControl_CheckResponse {
    IOControl_CheckResponse_NONSUCCESSFULLY = 0,
    IOControl_CheckResponse_SUCCESSFULLY = 1
} IOControl_CheckResponse;

/* Struct definitions */
typedef struct _IOControl {
    IOControl_TypeOfControl typeOfControl;
    bool has_digitalPin;
    int32_t digitalPin;
    bool has_analogPin;
    int32_t analogPin;
    bool has_checkResponse;
    IOControl_CheckResponse checkResponse;
} IOControl;

typedef struct _Stats {
    int32_t value;
    bool has_mbedVersion;
    int32_t mbedVersion;
    bool has_cpuId;
    int32_t cpuId;
} Stats;


/* Helper constants for enums */
#define _IOControl_TypeOfControl_MIN IOControl_TypeOfControl_ANALOGWRITE
#define _IOControl_TypeOfControl_MAX IOControl_TypeOfControl_DIGITALREAD
#define _IOControl_TypeOfControl_ARRAYSIZE ((IOControl_TypeOfControl)(IOControl_TypeOfControl_DIGITALREAD+1))

#define _IOControl_CheckResponse_MIN IOControl_CheckResponse_NONSUCCESSFULLY
#define _IOControl_CheckResponse_MAX IOControl_CheckResponse_SUCCESSFULLY
#define _IOControl_CheckResponse_ARRAYSIZE ((IOControl_CheckResponse)(IOControl_CheckResponse_SUCCESSFULLY+1))


/* Initializer values for message structs */
#define IOControl_init_default                   {_IOControl_TypeOfControl_MIN, false, 0, false, 0, false, IOControl_CheckResponse_SUCCESSFULLY}
#define Stats_init_default                       {0, false, 0, false, 0}
#define IOControl_init_zero                      {_IOControl_TypeOfControl_MIN, false, 0, false, 0, false, _IOControl_CheckResponse_MIN}
#define Stats_init_zero                          {0, false, 0, false, 0}

/* Field tags (for use in manual encoding/decoding) */
#define IOControl_typeOfControl_tag              1
#define IOControl_digitalPin_tag                 2
#define IOControl_analogPin_tag                  3
#define IOControl_checkResponse_tag              4
#define Stats_value_tag                          1
#define Stats_mbedVersion_tag                    2
#define Stats_cpuId_tag                          3

/* Struct field encoding specification for nanopb */
#define IOControl_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UENUM,    typeOfControl,     1) \
X(a, STATIC,   OPTIONAL, INT32,    digitalPin,        2) \
X(a, STATIC,   OPTIONAL, INT32,    analogPin,         3) \
X(a, STATIC,   OPTIONAL, UENUM,    checkResponse,     4)
#define IOControl_CALLBACK NULL
#define IOControl_DEFAULT (const pb_byte_t*)"\x08\x01\x20\x01\x00"

#define Stats_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, INT32,    value,             1) \
X(a, STATIC,   OPTIONAL, INT32,    mbedVersion,       2) \
X(a, STATIC,   OPTIONAL, INT32,    cpuId,             3)
#define Stats_CALLBACK NULL
#define Stats_DEFAULT NULL

extern const pb_msgdesc_t IOControl_msg;
extern const pb_msgdesc_t Stats_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define IOControl_fields &IOControl_msg
#define Stats_fields &Stats_msg

/* Maximum encoded size of messages (where known) */
#define IOControl_size                           26
#define Stats_size                               33

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
