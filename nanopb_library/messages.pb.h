// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
namespace smt32 {
class PruebasMarshallingUnmarshalling;
class PruebasMarshallingUnmarshallingDefaultTypeInternal;
extern PruebasMarshallingUnmarshallingDefaultTypeInternal _PruebasMarshallingUnmarshalling_default_instance_;
}  // namespace smt32
PROTOBUF_NAMESPACE_OPEN
template<> ::smt32::PruebasMarshallingUnmarshalling* Arena::CreateMaybeMessage<::smt32::PruebasMarshallingUnmarshalling>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace smt32 {

enum PruebasMarshallingUnmarshalling_NewValues : int {
  PruebasMarshallingUnmarshalling_NewValues_FIRSTVALUE = 0,
  PruebasMarshallingUnmarshalling_NewValues_SECONDVALUE = 1,
  PruebasMarshallingUnmarshalling_NewValues_THIRDVALUE = 2,
  PruebasMarshallingUnmarshalling_NewValues_FOURTHVALUE = 3,
  PruebasMarshallingUnmarshalling_NewValues_PruebasMarshallingUnmarshalling_NewValues_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PruebasMarshallingUnmarshalling_NewValues_PruebasMarshallingUnmarshalling_NewValues_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PruebasMarshallingUnmarshalling_NewValues_IsValid(int value);
constexpr PruebasMarshallingUnmarshalling_NewValues PruebasMarshallingUnmarshalling_NewValues_NewValues_MIN = PruebasMarshallingUnmarshalling_NewValues_FIRSTVALUE;
constexpr PruebasMarshallingUnmarshalling_NewValues PruebasMarshallingUnmarshalling_NewValues_NewValues_MAX = PruebasMarshallingUnmarshalling_NewValues_FOURTHVALUE;
constexpr int PruebasMarshallingUnmarshalling_NewValues_NewValues_ARRAYSIZE = PruebasMarshallingUnmarshalling_NewValues_NewValues_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PruebasMarshallingUnmarshalling_NewValues_descriptor();
template<typename T>
inline const std::string& PruebasMarshallingUnmarshalling_NewValues_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PruebasMarshallingUnmarshalling_NewValues>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PruebasMarshallingUnmarshalling_NewValues_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PruebasMarshallingUnmarshalling_NewValues_descriptor(), enum_t_value);
}
inline bool PruebasMarshallingUnmarshalling_NewValues_Parse(
    const std::string& name, PruebasMarshallingUnmarshalling_NewValues* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PruebasMarshallingUnmarshalling_NewValues>(
    PruebasMarshallingUnmarshalling_NewValues_descriptor(), name, value);
}
// ===================================================================

class PruebasMarshallingUnmarshalling PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:smt32.PruebasMarshallingUnmarshalling) */ {
 public:
  inline PruebasMarshallingUnmarshalling() : PruebasMarshallingUnmarshalling(nullptr) {};
  virtual ~PruebasMarshallingUnmarshalling();

  PruebasMarshallingUnmarshalling(const PruebasMarshallingUnmarshalling& from);
  PruebasMarshallingUnmarshalling(PruebasMarshallingUnmarshalling&& from) noexcept
    : PruebasMarshallingUnmarshalling() {
    *this = ::std::move(from);
  }

  inline PruebasMarshallingUnmarshalling& operator=(const PruebasMarshallingUnmarshalling& from) {
    CopyFrom(from);
    return *this;
  }
  inline PruebasMarshallingUnmarshalling& operator=(PruebasMarshallingUnmarshalling&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PruebasMarshallingUnmarshalling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PruebasMarshallingUnmarshalling* internal_default_instance() {
    return reinterpret_cast<const PruebasMarshallingUnmarshalling*>(
               &_PruebasMarshallingUnmarshalling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(PruebasMarshallingUnmarshalling& a, PruebasMarshallingUnmarshalling& b) {
    a.Swap(&b);
  }
  inline void Swap(PruebasMarshallingUnmarshalling* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PruebasMarshallingUnmarshalling* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PruebasMarshallingUnmarshalling* New() const final {
    return CreateMaybeMessage<PruebasMarshallingUnmarshalling>(nullptr);
  }

  PruebasMarshallingUnmarshalling* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PruebasMarshallingUnmarshalling>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PruebasMarshallingUnmarshalling& from);
  void MergeFrom(const PruebasMarshallingUnmarshalling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PruebasMarshallingUnmarshalling* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "smt32.PruebasMarshallingUnmarshalling";
  }
  protected:
  explicit PruebasMarshallingUnmarshalling(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef PruebasMarshallingUnmarshalling_NewValues NewValues;
  static constexpr NewValues FIRSTVALUE =
    PruebasMarshallingUnmarshalling_NewValues_FIRSTVALUE;
  static constexpr NewValues SECONDVALUE =
    PruebasMarshallingUnmarshalling_NewValues_SECONDVALUE;
  static constexpr NewValues THIRDVALUE =
    PruebasMarshallingUnmarshalling_NewValues_THIRDVALUE;
  static constexpr NewValues FOURTHVALUE =
    PruebasMarshallingUnmarshalling_NewValues_FOURTHVALUE;
  static inline bool NewValues_IsValid(int value) {
    return PruebasMarshallingUnmarshalling_NewValues_IsValid(value);
  }
  static constexpr NewValues NewValues_MIN =
    PruebasMarshallingUnmarshalling_NewValues_NewValues_MIN;
  static constexpr NewValues NewValues_MAX =
    PruebasMarshallingUnmarshalling_NewValues_NewValues_MAX;
  static constexpr int NewValues_ARRAYSIZE =
    PruebasMarshallingUnmarshalling_NewValues_NewValues_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  NewValues_descriptor() {
    return PruebasMarshallingUnmarshalling_NewValues_descriptor();
  }
  template<typename T>
  static inline const std::string& NewValues_Name(T enum_t_value) {
    static_assert(::std::is_same<T, NewValues>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function NewValues_Name.");
    return PruebasMarshallingUnmarshalling_NewValues_Name(enum_t_value);
  }
  static inline bool NewValues_Parse(const std::string& name,
      NewValues* value) {
    return PruebasMarshallingUnmarshalling_NewValues_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kMsgFieldNumber = 1,
    kDigitalPinFieldNumber = 2,
    kAnalogPinFieldNumber = 3,
    kNewValuesFieldNumber = 4,
  };
  // string msg = 1;
  void clear_msg();
  const std::string& msg() const;
  void set_msg(const std::string& value);
  void set_msg(std::string&& value);
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  std::string* mutable_msg();
  std::string* release_msg();
  void set_allocated_msg(std::string* msg);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_msg();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_msg(
      std::string* msg);
  private:
  const std::string& _internal_msg() const;
  void _internal_set_msg(const std::string& value);
  std::string* _internal_mutable_msg();
  public:

  // int32 digitalPin = 2;
  void clear_digitalpin();
  ::PROTOBUF_NAMESPACE_ID::int32 digitalpin() const;
  void set_digitalpin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_digitalpin() const;
  void _internal_set_digitalpin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 analogPin = 3;
  void clear_analogpin();
  ::PROTOBUF_NAMESPACE_ID::int32 analogpin() const;
  void set_analogpin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_analogpin() const;
  void _internal_set_analogpin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .smt32.PruebasMarshallingUnmarshalling.NewValues new_values = 4;
  void clear_new_values();
  ::smt32::PruebasMarshallingUnmarshalling_NewValues new_values() const;
  void set_new_values(::smt32::PruebasMarshallingUnmarshalling_NewValues value);
  private:
  ::smt32::PruebasMarshallingUnmarshalling_NewValues _internal_new_values() const;
  void _internal_set_new_values(::smt32::PruebasMarshallingUnmarshalling_NewValues value);
  public:

  // @@protoc_insertion_point(class_scope:smt32.PruebasMarshallingUnmarshalling)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_;
  ::PROTOBUF_NAMESPACE_ID::int32 digitalpin_;
  ::PROTOBUF_NAMESPACE_ID::int32 analogpin_;
  int new_values_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PruebasMarshallingUnmarshalling

// string msg = 1;
inline void PruebasMarshallingUnmarshalling::clear_msg() {
  msg_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& PruebasMarshallingUnmarshalling::msg() const {
  // @@protoc_insertion_point(field_get:smt32.PruebasMarshallingUnmarshalling.msg)
  return _internal_msg();
}
inline void PruebasMarshallingUnmarshalling::set_msg(const std::string& value) {
  _internal_set_msg(value);
  // @@protoc_insertion_point(field_set:smt32.PruebasMarshallingUnmarshalling.msg)
}
inline std::string* PruebasMarshallingUnmarshalling::mutable_msg() {
  // @@protoc_insertion_point(field_mutable:smt32.PruebasMarshallingUnmarshalling.msg)
  return _internal_mutable_msg();
}
inline const std::string& PruebasMarshallingUnmarshalling::_internal_msg() const {
  return msg_.Get();
}
inline void PruebasMarshallingUnmarshalling::_internal_set_msg(const std::string& value) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PruebasMarshallingUnmarshalling::set_msg(std::string&& value) {
  
  msg_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:smt32.PruebasMarshallingUnmarshalling.msg)
}
inline void PruebasMarshallingUnmarshalling::set_msg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:smt32.PruebasMarshallingUnmarshalling.msg)
}
inline void PruebasMarshallingUnmarshalling::set_msg(const char* value,
    size_t size) {
  
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:smt32.PruebasMarshallingUnmarshalling.msg)
}
inline std::string* PruebasMarshallingUnmarshalling::_internal_mutable_msg() {
  
  return msg_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PruebasMarshallingUnmarshalling::release_msg() {
  // @@protoc_insertion_point(field_release:smt32.PruebasMarshallingUnmarshalling.msg)
  return msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PruebasMarshallingUnmarshalling::set_allocated_msg(std::string* msg) {
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:smt32.PruebasMarshallingUnmarshalling.msg)
}
inline std::string* PruebasMarshallingUnmarshalling::unsafe_arena_release_msg() {
  // @@protoc_insertion_point(field_unsafe_arena_release:smt32.PruebasMarshallingUnmarshalling.msg)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return msg_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PruebasMarshallingUnmarshalling::unsafe_arena_set_allocated_msg(
    std::string* msg) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (msg != nullptr) {
    
  } else {
    
  }
  msg_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      msg, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:smt32.PruebasMarshallingUnmarshalling.msg)
}

// int32 digitalPin = 2;
inline void PruebasMarshallingUnmarshalling::clear_digitalpin() {
  digitalpin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PruebasMarshallingUnmarshalling::_internal_digitalpin() const {
  return digitalpin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PruebasMarshallingUnmarshalling::digitalpin() const {
  // @@protoc_insertion_point(field_get:smt32.PruebasMarshallingUnmarshalling.digitalPin)
  return _internal_digitalpin();
}
inline void PruebasMarshallingUnmarshalling::_internal_set_digitalpin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  digitalpin_ = value;
}
inline void PruebasMarshallingUnmarshalling::set_digitalpin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_digitalpin(value);
  // @@protoc_insertion_point(field_set:smt32.PruebasMarshallingUnmarshalling.digitalPin)
}

// int32 analogPin = 3;
inline void PruebasMarshallingUnmarshalling::clear_analogpin() {
  analogpin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PruebasMarshallingUnmarshalling::_internal_analogpin() const {
  return analogpin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PruebasMarshallingUnmarshalling::analogpin() const {
  // @@protoc_insertion_point(field_get:smt32.PruebasMarshallingUnmarshalling.analogPin)
  return _internal_analogpin();
}
inline void PruebasMarshallingUnmarshalling::_internal_set_analogpin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  analogpin_ = value;
}
inline void PruebasMarshallingUnmarshalling::set_analogpin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_analogpin(value);
  // @@protoc_insertion_point(field_set:smt32.PruebasMarshallingUnmarshalling.analogPin)
}

// .smt32.PruebasMarshallingUnmarshalling.NewValues new_values = 4;
inline void PruebasMarshallingUnmarshalling::clear_new_values() {
  new_values_ = 0;
}
inline ::smt32::PruebasMarshallingUnmarshalling_NewValues PruebasMarshallingUnmarshalling::_internal_new_values() const {
  return static_cast< ::smt32::PruebasMarshallingUnmarshalling_NewValues >(new_values_);
}
inline ::smt32::PruebasMarshallingUnmarshalling_NewValues PruebasMarshallingUnmarshalling::new_values() const {
  // @@protoc_insertion_point(field_get:smt32.PruebasMarshallingUnmarshalling.new_values)
  return _internal_new_values();
}
inline void PruebasMarshallingUnmarshalling::_internal_set_new_values(::smt32::PruebasMarshallingUnmarshalling_NewValues value) {
  
  new_values_ = value;
}
inline void PruebasMarshallingUnmarshalling::set_new_values(::smt32::PruebasMarshallingUnmarshalling_NewValues value) {
  _internal_set_new_values(value);
  // @@protoc_insertion_point(field_set:smt32.PruebasMarshallingUnmarshalling.new_values)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace smt32

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::smt32::PruebasMarshallingUnmarshalling_NewValues> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::smt32::PruebasMarshallingUnmarshalling_NewValues>() {
  return ::smt32::PruebasMarshallingUnmarshalling_NewValues_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
